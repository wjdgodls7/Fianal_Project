module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.12). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateComment {
  count: Int!
}

type AggregateCommentLike {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateHash {
  count: Int!
}

type AggregateLike {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateRoom {
  count: Int!
}

type AggregateStory {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserLogin {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Comment {
  id: ID!
  text: String!
  user: User!
  post: Post!
  commentLikes(where: CommentLikeWhereInput, orderBy: CommentLikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CommentLike!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  text: String!
  user: UserCreateOneWithoutCommentsInput!
  post: PostCreateOneWithoutCommentsInput!
  commentLikes: CommentLikeCreateManyWithoutCommentInput
}

input CommentCreateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateOneWithoutCommentLikesInput {
  create: CommentCreateWithoutCommentLikesInput
  connect: CommentWhereUniqueInput
}

input CommentCreateWithoutCommentLikesInput {
  id: ID
  text: String!
  user: UserCreateOneWithoutCommentsInput!
  post: PostCreateOneWithoutCommentsInput!
}

input CommentCreateWithoutPostInput {
  id: ID
  text: String!
  user: UserCreateOneWithoutCommentsInput!
  commentLikes: CommentLikeCreateManyWithoutCommentInput
}

input CommentCreateWithoutUserInput {
  id: ID
  text: String!
  post: PostCreateOneWithoutCommentsInput!
  commentLikes: CommentLikeCreateManyWithoutCommentInput
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

type CommentLike {
  id: ID!
  user: User!
  comment: Comment!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CommentLikeConnection {
  pageInfo: PageInfo!
  edges: [CommentLikeEdge]!
  aggregate: AggregateCommentLike!
}

input CommentLikeCreateInput {
  id: ID
  user: UserCreateOneWithoutCommentLikesInput!
  comment: CommentCreateOneWithoutCommentLikesInput!
}

input CommentLikeCreateManyWithoutCommentInput {
  create: [CommentLikeCreateWithoutCommentInput!]
  connect: [CommentLikeWhereUniqueInput!]
}

input CommentLikeCreateManyWithoutUserInput {
  create: [CommentLikeCreateWithoutUserInput!]
  connect: [CommentLikeWhereUniqueInput!]
}

input CommentLikeCreateWithoutCommentInput {
  id: ID
  user: UserCreateOneWithoutCommentLikesInput!
}

input CommentLikeCreateWithoutUserInput {
  id: ID
  comment: CommentCreateOneWithoutCommentLikesInput!
}

type CommentLikeEdge {
  node: CommentLike!
  cursor: String!
}

enum CommentLikeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CommentLikePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CommentLikeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CommentLikeScalarWhereInput!]
  OR: [CommentLikeScalarWhereInput!]
  NOT: [CommentLikeScalarWhereInput!]
}

type CommentLikeSubscriptionPayload {
  mutation: MutationType!
  node: CommentLike
  updatedFields: [String!]
  previousValues: CommentLikePreviousValues
}

input CommentLikeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentLikeWhereInput
  AND: [CommentLikeSubscriptionWhereInput!]
  OR: [CommentLikeSubscriptionWhereInput!]
  NOT: [CommentLikeSubscriptionWhereInput!]
}

input CommentLikeUpdateInput {
  user: UserUpdateOneRequiredWithoutCommentLikesInput
  comment: CommentUpdateOneRequiredWithoutCommentLikesInput
}

input CommentLikeUpdateManyWithoutCommentInput {
  create: [CommentLikeCreateWithoutCommentInput!]
  delete: [CommentLikeWhereUniqueInput!]
  connect: [CommentLikeWhereUniqueInput!]
  set: [CommentLikeWhereUniqueInput!]
  disconnect: [CommentLikeWhereUniqueInput!]
  update: [CommentLikeUpdateWithWhereUniqueWithoutCommentInput!]
  upsert: [CommentLikeUpsertWithWhereUniqueWithoutCommentInput!]
  deleteMany: [CommentLikeScalarWhereInput!]
}

input CommentLikeUpdateManyWithoutUserInput {
  create: [CommentLikeCreateWithoutUserInput!]
  delete: [CommentLikeWhereUniqueInput!]
  connect: [CommentLikeWhereUniqueInput!]
  set: [CommentLikeWhereUniqueInput!]
  disconnect: [CommentLikeWhereUniqueInput!]
  update: [CommentLikeUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CommentLikeUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [CommentLikeScalarWhereInput!]
}

input CommentLikeUpdateWithoutCommentDataInput {
  user: UserUpdateOneRequiredWithoutCommentLikesInput
}

input CommentLikeUpdateWithoutUserDataInput {
  comment: CommentUpdateOneRequiredWithoutCommentLikesInput
}

input CommentLikeUpdateWithWhereUniqueWithoutCommentInput {
  where: CommentLikeWhereUniqueInput!
  data: CommentLikeUpdateWithoutCommentDataInput!
}

input CommentLikeUpdateWithWhereUniqueWithoutUserInput {
  where: CommentLikeWhereUniqueInput!
  data: CommentLikeUpdateWithoutUserDataInput!
}

input CommentLikeUpsertWithWhereUniqueWithoutCommentInput {
  where: CommentLikeWhereUniqueInput!
  update: CommentLikeUpdateWithoutCommentDataInput!
  create: CommentLikeCreateWithoutCommentInput!
}

input CommentLikeUpsertWithWhereUniqueWithoutUserInput {
  where: CommentLikeWhereUniqueInput!
  update: CommentLikeUpdateWithoutUserDataInput!
  create: CommentLikeCreateWithoutUserInput!
}

input CommentLikeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  comment: CommentWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CommentLikeWhereInput!]
  OR: [CommentLikeWhereInput!]
  NOT: [CommentLikeWhereInput!]
}

input CommentLikeWhereUniqueInput {
  id: ID
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CommentPreviousValues {
  id: ID!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateInput {
  text: String
  user: UserUpdateOneRequiredWithoutCommentsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
  commentLikes: CommentLikeUpdateManyWithoutCommentInput
}

input CommentUpdateManyDataInput {
  text: String
}

input CommentUpdateManyMutationInput {
  text: String
}

input CommentUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateOneRequiredWithoutCommentLikesInput {
  create: CommentCreateWithoutCommentLikesInput
  update: CommentUpdateWithoutCommentLikesDataInput
  upsert: CommentUpsertWithoutCommentLikesInput
  connect: CommentWhereUniqueInput
}

input CommentUpdateWithoutCommentLikesDataInput {
  text: String
  user: UserUpdateOneRequiredWithoutCommentsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithoutPostDataInput {
  text: String
  user: UserUpdateOneRequiredWithoutCommentsInput
  commentLikes: CommentLikeUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutUserDataInput {
  text: String
  post: PostUpdateOneRequiredWithoutCommentsInput
  commentLikes: CommentLikeUpdateManyWithoutCommentInput
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostDataInput!
}

input CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutUserDataInput!
}

input CommentUpsertWithoutCommentLikesInput {
  update: CommentUpdateWithoutCommentLikesDataInput!
  create: CommentCreateWithoutCommentLikesInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostDataInput!
  create: CommentCreateWithoutPostInput!
}

input CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutUserDataInput!
  create: CommentCreateWithoutUserInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  user: UserWhereInput
  post: PostWhereInput
  commentLikes_every: CommentLikeWhereInput
  commentLikes_some: CommentLikeWhereInput
  commentLikes_none: CommentLikeWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

type File {
  id: ID!
  url: String!
  post: Post!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FileConnection {
  pageInfo: PageInfo!
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  id: ID
  url: String!
  post: PostCreateOneWithoutFilesInput!
}

input FileCreateManyInput {
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateManyWithoutPostInput {
  create: [FileCreateWithoutPostInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateWithoutPostInput {
  id: ID
  url: String!
}

type FileEdge {
  node: File!
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FilePreviousValues {
  id: ID!
  url: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input FileScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FileScalarWhereInput!]
  OR: [FileScalarWhereInput!]
  NOT: [FileScalarWhereInput!]
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FileWhereInput
  AND: [FileSubscriptionWhereInput!]
  OR: [FileSubscriptionWhereInput!]
  NOT: [FileSubscriptionWhereInput!]
}

input FileUpdateDataInput {
  url: String
  post: PostUpdateOneRequiredWithoutFilesInput
}

input FileUpdateInput {
  url: String
  post: PostUpdateOneRequiredWithoutFilesInput
}

input FileUpdateManyDataInput {
  url: String
}

input FileUpdateManyInput {
  create: [FileCreateInput!]
  update: [FileUpdateWithWhereUniqueNestedInput!]
  upsert: [FileUpsertWithWhereUniqueNestedInput!]
  delete: [FileWhereUniqueInput!]
  connect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  deleteMany: [FileScalarWhereInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
}

input FileUpdateManyMutationInput {
  url: String
}

input FileUpdateManyWithoutPostInput {
  create: [FileCreateWithoutPostInput!]
  delete: [FileWhereUniqueInput!]
  connect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [FileScalarWhereInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
}

input FileUpdateManyWithWhereNestedInput {
  where: FileScalarWhereInput!
  data: FileUpdateManyDataInput!
}

input FileUpdateWithoutPostDataInput {
  url: String
}

input FileUpdateWithWhereUniqueNestedInput {
  where: FileWhereUniqueInput!
  data: FileUpdateDataInput!
}

input FileUpdateWithWhereUniqueWithoutPostInput {
  where: FileWhereUniqueInput!
  data: FileUpdateWithoutPostDataInput!
}

input FileUpsertWithWhereUniqueNestedInput {
  where: FileWhereUniqueInput!
  update: FileUpdateDataInput!
  create: FileCreateInput!
}

input FileUpsertWithWhereUniqueWithoutPostInput {
  where: FileWhereUniqueInput!
  update: FileUpdateWithoutPostDataInput!
  create: FileCreateWithoutPostInput!
}

input FileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  post: PostWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
}

input FileWhereUniqueInput {
  id: ID
}

type Hash {
  id: ID!
  tag: String!
  post: Post!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type HashConnection {
  pageInfo: PageInfo!
  edges: [HashEdge]!
  aggregate: AggregateHash!
}

input HashCreateInput {
  id: ID
  tag: String!
  post: PostCreateOneWithoutHashesInput!
}

input HashCreateManyWithoutPostInput {
  create: [HashCreateWithoutPostInput!]
  connect: [HashWhereUniqueInput!]
}

input HashCreateWithoutPostInput {
  id: ID
  tag: String!
}

type HashEdge {
  node: Hash!
  cursor: String!
}

enum HashOrderByInput {
  id_ASC
  id_DESC
  tag_ASC
  tag_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type HashPreviousValues {
  id: ID!
  tag: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input HashScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  tag: String
  tag_not: String
  tag_in: [String!]
  tag_not_in: [String!]
  tag_lt: String
  tag_lte: String
  tag_gt: String
  tag_gte: String
  tag_contains: String
  tag_not_contains: String
  tag_starts_with: String
  tag_not_starts_with: String
  tag_ends_with: String
  tag_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [HashScalarWhereInput!]
  OR: [HashScalarWhereInput!]
  NOT: [HashScalarWhereInput!]
}

type HashSubscriptionPayload {
  mutation: MutationType!
  node: Hash
  updatedFields: [String!]
  previousValues: HashPreviousValues
}

input HashSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HashWhereInput
  AND: [HashSubscriptionWhereInput!]
  OR: [HashSubscriptionWhereInput!]
  NOT: [HashSubscriptionWhereInput!]
}

input HashUpdateInput {
  tag: String
  post: PostUpdateOneRequiredWithoutHashesInput
}

input HashUpdateManyDataInput {
  tag: String
}

input HashUpdateManyMutationInput {
  tag: String
}

input HashUpdateManyWithoutPostInput {
  create: [HashCreateWithoutPostInput!]
  delete: [HashWhereUniqueInput!]
  connect: [HashWhereUniqueInput!]
  set: [HashWhereUniqueInput!]
  disconnect: [HashWhereUniqueInput!]
  update: [HashUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [HashUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [HashScalarWhereInput!]
  updateMany: [HashUpdateManyWithWhereNestedInput!]
}

input HashUpdateManyWithWhereNestedInput {
  where: HashScalarWhereInput!
  data: HashUpdateManyDataInput!
}

input HashUpdateWithoutPostDataInput {
  tag: String
}

input HashUpdateWithWhereUniqueWithoutPostInput {
  where: HashWhereUniqueInput!
  data: HashUpdateWithoutPostDataInput!
}

input HashUpsertWithWhereUniqueWithoutPostInput {
  where: HashWhereUniqueInput!
  update: HashUpdateWithoutPostDataInput!
  create: HashCreateWithoutPostInput!
}

input HashWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  tag: String
  tag_not: String
  tag_in: [String!]
  tag_not_in: [String!]
  tag_lt: String
  tag_lte: String
  tag_gt: String
  tag_gte: String
  tag_contains: String
  tag_not_contains: String
  tag_starts_with: String
  tag_not_starts_with: String
  tag_ends_with: String
  tag_not_ends_with: String
  post: PostWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [HashWhereInput!]
  OR: [HashWhereInput!]
  NOT: [HashWhereInput!]
}

input HashWhereUniqueInput {
  id: ID
}

type Like {
  id: ID!
  user: User!
  post: Post!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LikeConnection {
  pageInfo: PageInfo!
  edges: [LikeEdge]!
  aggregate: AggregateLike!
}

input LikeCreateInput {
  id: ID
  user: UserCreateOneWithoutLikesInput!
  post: PostCreateOneWithoutLikesInput!
}

input LikeCreateManyWithoutPostInput {
  create: [LikeCreateWithoutPostInput!]
  connect: [LikeWhereUniqueInput!]
}

input LikeCreateManyWithoutUserInput {
  create: [LikeCreateWithoutUserInput!]
  connect: [LikeWhereUniqueInput!]
}

input LikeCreateWithoutPostInput {
  id: ID
  user: UserCreateOneWithoutLikesInput!
}

input LikeCreateWithoutUserInput {
  id: ID
  post: PostCreateOneWithoutLikesInput!
}

type LikeEdge {
  node: Like!
  cursor: String!
}

enum LikeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LikePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input LikeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LikeScalarWhereInput!]
  OR: [LikeScalarWhereInput!]
  NOT: [LikeScalarWhereInput!]
}

type LikeSubscriptionPayload {
  mutation: MutationType!
  node: Like
  updatedFields: [String!]
  previousValues: LikePreviousValues
}

input LikeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LikeWhereInput
  AND: [LikeSubscriptionWhereInput!]
  OR: [LikeSubscriptionWhereInput!]
  NOT: [LikeSubscriptionWhereInput!]
}

input LikeUpdateInput {
  user: UserUpdateOneRequiredWithoutLikesInput
  post: PostUpdateOneRequiredWithoutLikesInput
}

input LikeUpdateManyWithoutPostInput {
  create: [LikeCreateWithoutPostInput!]
  delete: [LikeWhereUniqueInput!]
  connect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  disconnect: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [LikeScalarWhereInput!]
}

input LikeUpdateManyWithoutUserInput {
  create: [LikeCreateWithoutUserInput!]
  delete: [LikeWhereUniqueInput!]
  connect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  disconnect: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [LikeScalarWhereInput!]
}

input LikeUpdateWithoutPostDataInput {
  user: UserUpdateOneRequiredWithoutLikesInput
}

input LikeUpdateWithoutUserDataInput {
  post: PostUpdateOneRequiredWithoutLikesInput
}

input LikeUpdateWithWhereUniqueWithoutPostInput {
  where: LikeWhereUniqueInput!
  data: LikeUpdateWithoutPostDataInput!
}

input LikeUpdateWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput!
  data: LikeUpdateWithoutUserDataInput!
}

input LikeUpsertWithWhereUniqueWithoutPostInput {
  where: LikeWhereUniqueInput!
  update: LikeUpdateWithoutPostDataInput!
  create: LikeCreateWithoutPostInput!
}

input LikeUpsertWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput!
  update: LikeUpdateWithoutUserDataInput!
  create: LikeCreateWithoutUserInput!
}

input LikeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  post: PostWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LikeWhereInput!]
  OR: [LikeWhereInput!]
  NOT: [LikeWhereInput!]
}

input LikeWhereUniqueInput {
  id: ID
}

scalar Long

type Message {
  id: ID!
  text: String!
  from: User!
  to: User!
  room: Room!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MessageConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  id: ID
  text: String!
  from: UserCreateOneInput!
  to: UserCreateOneInput!
  room: RoomCreateOneWithoutMessagesInput!
}

input MessageCreateManyWithoutRoomInput {
  create: [MessageCreateWithoutRoomInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateWithoutRoomInput {
  id: ID
  text: String!
  from: UserCreateOneInput!
  to: UserCreateOneInput!
}

type MessageEdge {
  node: Message!
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MessagePreviousValues {
  id: ID!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input MessageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  NOT: [MessageScalarWhereInput!]
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
  AND: [MessageSubscriptionWhereInput!]
  OR: [MessageSubscriptionWhereInput!]
  NOT: [MessageSubscriptionWhereInput!]
}

input MessageUpdateInput {
  text: String
  from: UserUpdateOneRequiredInput
  to: UserUpdateOneRequiredInput
  room: RoomUpdateOneRequiredWithoutMessagesInput
}

input MessageUpdateManyDataInput {
  text: String
}

input MessageUpdateManyMutationInput {
  text: String
}

input MessageUpdateManyWithoutRoomInput {
  create: [MessageCreateWithoutRoomInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutRoomInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutRoomInput!]
  deleteMany: [MessageScalarWhereInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
}

input MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput!
  data: MessageUpdateManyDataInput!
}

input MessageUpdateWithoutRoomDataInput {
  text: String
  from: UserUpdateOneRequiredInput
  to: UserUpdateOneRequiredInput
}

input MessageUpdateWithWhereUniqueWithoutRoomInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutRoomDataInput!
}

input MessageUpsertWithWhereUniqueWithoutRoomInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutRoomDataInput!
  create: MessageCreateWithoutRoomInput!
}

input MessageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  from: UserWhereInput
  to: UserWhereInput
  room: RoomWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createCommentLike(data: CommentLikeCreateInput!): CommentLike!
  updateCommentLike(data: CommentLikeUpdateInput!, where: CommentLikeWhereUniqueInput!): CommentLike
  upsertCommentLike(where: CommentLikeWhereUniqueInput!, create: CommentLikeCreateInput!, update: CommentLikeUpdateInput!): CommentLike!
  deleteCommentLike(where: CommentLikeWhereUniqueInput!): CommentLike
  deleteManyCommentLikes(where: CommentLikeWhereInput): BatchPayload!
  createFile(data: FileCreateInput!): File!
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  deleteFile(where: FileWhereUniqueInput!): File
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  createHash(data: HashCreateInput!): Hash!
  updateHash(data: HashUpdateInput!, where: HashWhereUniqueInput!): Hash
  updateManyHashes(data: HashUpdateManyMutationInput!, where: HashWhereInput): BatchPayload!
  upsertHash(where: HashWhereUniqueInput!, create: HashCreateInput!, update: HashUpdateInput!): Hash!
  deleteHash(where: HashWhereUniqueInput!): Hash
  deleteManyHashes(where: HashWhereInput): BatchPayload!
  createLike(data: LikeCreateInput!): Like!
  updateLike(data: LikeUpdateInput!, where: LikeWhereUniqueInput!): Like
  upsertLike(where: LikeWhereUniqueInput!, create: LikeCreateInput!, update: LikeUpdateInput!): Like!
  deleteLike(where: LikeWhereUniqueInput!): Like
  deleteManyLikes(where: LikeWhereInput): BatchPayload!
  createMessage(data: MessageCreateInput!): Message!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createRoom(data: RoomCreateInput!): Room!
  updateRoom(data: RoomUpdateInput!, where: RoomWhereUniqueInput!): Room
  upsertRoom(where: RoomWhereUniqueInput!, create: RoomCreateInput!, update: RoomUpdateInput!): Room!
  deleteRoom(where: RoomWhereUniqueInput!): Room
  deleteManyRooms(where: RoomWhereInput): BatchPayload!
  createStory(data: StoryCreateInput!): Story!
  updateStory(data: StoryUpdateInput!, where: StoryWhereUniqueInput!): Story
  updateManyStories(data: StoryUpdateManyMutationInput!, where: StoryWhereInput): BatchPayload!
  upsertStory(where: StoryWhereUniqueInput!, create: StoryCreateInput!, update: StoryUpdateInput!): Story!
  deleteStory(where: StoryWhereUniqueInput!): Story
  deleteManyStories(where: StoryWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createUserLogin(data: UserLoginCreateInput!): UserLogin!
  updateUserLogin(data: UserLoginUpdateInput!, where: UserLoginWhereUniqueInput!): UserLogin
  updateManyUserLogins(data: UserLoginUpdateManyMutationInput!, where: UserLoginWhereInput): BatchPayload!
  upsertUserLogin(where: UserLoginWhereUniqueInput!, create: UserLoginCreateInput!, update: UserLoginUpdateInput!): UserLogin!
  deleteUserLogin(where: UserLoginWhereUniqueInput!): UserLogin
  deleteManyUserLogins(where: UserLoginWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  location: String
  caption: String!
  savedByUser(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  user: User!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  state: String!
  hashes(where: HashWhereInput, orderBy: HashOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hash!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  location: String
  caption: String!
  savedByUser: UserCreateManyWithoutSavedPostsInput
  user: UserCreateOneWithoutPostsInput!
  files: FileCreateManyWithoutPostInput
  likes: LikeCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  state: String
  hashes: HashCreateManyWithoutPostInput
}

input PostCreateManyWithoutSavedByUserInput {
  create: [PostCreateWithoutSavedByUserInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutFilesInput {
  create: PostCreateWithoutFilesInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutHashesInput {
  create: PostCreateWithoutHashesInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutLikesInput {
  create: PostCreateWithoutLikesInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutCommentsInput {
  id: ID
  location: String
  caption: String!
  savedByUser: UserCreateManyWithoutSavedPostsInput
  user: UserCreateOneWithoutPostsInput!
  files: FileCreateManyWithoutPostInput
  likes: LikeCreateManyWithoutPostInput
  state: String
  hashes: HashCreateManyWithoutPostInput
}

input PostCreateWithoutFilesInput {
  id: ID
  location: String
  caption: String!
  savedByUser: UserCreateManyWithoutSavedPostsInput
  user: UserCreateOneWithoutPostsInput!
  likes: LikeCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  state: String
  hashes: HashCreateManyWithoutPostInput
}

input PostCreateWithoutHashesInput {
  id: ID
  location: String
  caption: String!
  savedByUser: UserCreateManyWithoutSavedPostsInput
  user: UserCreateOneWithoutPostsInput!
  files: FileCreateManyWithoutPostInput
  likes: LikeCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  state: String
}

input PostCreateWithoutLikesInput {
  id: ID
  location: String
  caption: String!
  savedByUser: UserCreateManyWithoutSavedPostsInput
  user: UserCreateOneWithoutPostsInput!
  files: FileCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  state: String
  hashes: HashCreateManyWithoutPostInput
}

input PostCreateWithoutSavedByUserInput {
  id: ID
  location: String
  caption: String!
  user: UserCreateOneWithoutPostsInput!
  files: FileCreateManyWithoutPostInput
  likes: LikeCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  state: String
  hashes: HashCreateManyWithoutPostInput
}

input PostCreateWithoutUserInput {
  id: ID
  location: String
  caption: String!
  savedByUser: UserCreateManyWithoutSavedPostsInput
  files: FileCreateManyWithoutPostInput
  likes: LikeCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  state: String
  hashes: HashCreateManyWithoutPostInput
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  location_ASC
  location_DESC
  caption_ASC
  caption_DESC
  state_ASC
  state_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PostPreviousValues {
  id: ID!
  location: String
  caption: String!
  state: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  caption: String
  caption_not: String
  caption_in: [String!]
  caption_not_in: [String!]
  caption_lt: String
  caption_lte: String
  caption_gt: String
  caption_gte: String
  caption_contains: String
  caption_not_contains: String
  caption_starts_with: String
  caption_not_starts_with: String
  caption_ends_with: String
  caption_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  location: String
  caption: String
  savedByUser: UserUpdateManyWithoutSavedPostsInput
  user: UserUpdateOneRequiredWithoutPostsInput
  files: FileUpdateManyWithoutPostInput
  likes: LikeUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  state: String
  hashes: HashUpdateManyWithoutPostInput
}

input PostUpdateManyDataInput {
  location: String
  caption: String
  state: String
}

input PostUpdateManyMutationInput {
  location: String
  caption: String
  state: String
}

input PostUpdateManyWithoutSavedByUserInput {
  create: [PostCreateWithoutSavedByUserInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutSavedByUserInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutSavedByUserInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateOneRequiredWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostUpdateOneRequiredWithoutFilesInput {
  create: PostCreateWithoutFilesInput
  update: PostUpdateWithoutFilesDataInput
  upsert: PostUpsertWithoutFilesInput
  connect: PostWhereUniqueInput
}

input PostUpdateOneRequiredWithoutHashesInput {
  create: PostCreateWithoutHashesInput
  update: PostUpdateWithoutHashesDataInput
  upsert: PostUpsertWithoutHashesInput
  connect: PostWhereUniqueInput
}

input PostUpdateOneRequiredWithoutLikesInput {
  create: PostCreateWithoutLikesInput
  update: PostUpdateWithoutLikesDataInput
  upsert: PostUpsertWithoutLikesInput
  connect: PostWhereUniqueInput
}

input PostUpdateWithoutCommentsDataInput {
  location: String
  caption: String
  savedByUser: UserUpdateManyWithoutSavedPostsInput
  user: UserUpdateOneRequiredWithoutPostsInput
  files: FileUpdateManyWithoutPostInput
  likes: LikeUpdateManyWithoutPostInput
  state: String
  hashes: HashUpdateManyWithoutPostInput
}

input PostUpdateWithoutFilesDataInput {
  location: String
  caption: String
  savedByUser: UserUpdateManyWithoutSavedPostsInput
  user: UserUpdateOneRequiredWithoutPostsInput
  likes: LikeUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  state: String
  hashes: HashUpdateManyWithoutPostInput
}

input PostUpdateWithoutHashesDataInput {
  location: String
  caption: String
  savedByUser: UserUpdateManyWithoutSavedPostsInput
  user: UserUpdateOneRequiredWithoutPostsInput
  files: FileUpdateManyWithoutPostInput
  likes: LikeUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  state: String
}

input PostUpdateWithoutLikesDataInput {
  location: String
  caption: String
  savedByUser: UserUpdateManyWithoutSavedPostsInput
  user: UserUpdateOneRequiredWithoutPostsInput
  files: FileUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  state: String
  hashes: HashUpdateManyWithoutPostInput
}

input PostUpdateWithoutSavedByUserDataInput {
  location: String
  caption: String
  user: UserUpdateOneRequiredWithoutPostsInput
  files: FileUpdateManyWithoutPostInput
  likes: LikeUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  state: String
  hashes: HashUpdateManyWithoutPostInput
}

input PostUpdateWithoutUserDataInput {
  location: String
  caption: String
  savedByUser: UserUpdateManyWithoutSavedPostsInput
  files: FileUpdateManyWithoutPostInput
  likes: LikeUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  state: String
  hashes: HashUpdateManyWithoutPostInput
}

input PostUpdateWithWhereUniqueWithoutSavedByUserInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutSavedByUserDataInput!
}

input PostUpdateWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutUserDataInput!
}

input PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput!
  create: PostCreateWithoutCommentsInput!
}

input PostUpsertWithoutFilesInput {
  update: PostUpdateWithoutFilesDataInput!
  create: PostCreateWithoutFilesInput!
}

input PostUpsertWithoutHashesInput {
  update: PostUpdateWithoutHashesDataInput!
  create: PostCreateWithoutHashesInput!
}

input PostUpsertWithoutLikesInput {
  update: PostUpdateWithoutLikesDataInput!
  create: PostCreateWithoutLikesInput!
}

input PostUpsertWithWhereUniqueWithoutSavedByUserInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutSavedByUserDataInput!
  create: PostCreateWithoutSavedByUserInput!
}

input PostUpsertWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutUserDataInput!
  create: PostCreateWithoutUserInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  caption: String
  caption_not: String
  caption_in: [String!]
  caption_not_in: [String!]
  caption_lt: String
  caption_lte: String
  caption_gt: String
  caption_gte: String
  caption_contains: String
  caption_not_contains: String
  caption_starts_with: String
  caption_not_starts_with: String
  caption_ends_with: String
  caption_not_ends_with: String
  savedByUser_every: UserWhereInput
  savedByUser_some: UserWhereInput
  savedByUser_none: UserWhereInput
  user: UserWhereInput
  files_every: FileWhereInput
  files_some: FileWhereInput
  files_none: FileWhereInput
  likes_every: LikeWhereInput
  likes_some: LikeWhereInput
  likes_none: LikeWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  hashes_every: HashWhereInput
  hashes_some: HashWhereInput
  hashes_none: HashWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  commentLike(where: CommentLikeWhereUniqueInput!): CommentLike
  commentLikes(where: CommentLikeWhereInput, orderBy: CommentLikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CommentLike]!
  commentLikesConnection(where: CommentLikeWhereInput, orderBy: CommentLikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentLikeConnection!
  file(where: FileWhereUniqueInput!): File
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  hash(where: HashWhereUniqueInput!): Hash
  hashes(where: HashWhereInput, orderBy: HashOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hash]!
  hashesConnection(where: HashWhereInput, orderBy: HashOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HashConnection!
  like(where: LikeWhereUniqueInput!): Like
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like]!
  likesConnection(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LikeConnection!
  message(where: MessageWhereUniqueInput!): Message
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  room(where: RoomWhereUniqueInput!): Room
  rooms(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Room]!
  roomsConnection(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoomConnection!
  story(where: StoryWhereUniqueInput!): Story
  stories(where: StoryWhereInput, orderBy: StoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Story]!
  storiesConnection(where: StoryWhereInput, orderBy: StoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StoryConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userLogin(where: UserLoginWhereUniqueInput!): UserLogin
  userLogins(where: UserLoginWhereInput, orderBy: UserLoginOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserLogin]!
  userLoginsConnection(where: UserLoginWhereInput, orderBy: UserLoginOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserLoginConnection!
  node(id: ID!): Node
}

type Room {
  id: ID!
  participants(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RoomConnection {
  pageInfo: PageInfo!
  edges: [RoomEdge]!
  aggregate: AggregateRoom!
}

input RoomCreateInput {
  id: ID
  participants: UserCreateManyWithoutRoomsInput
  messages: MessageCreateManyWithoutRoomInput
}

input RoomCreateManyWithoutParticipantsInput {
  create: [RoomCreateWithoutParticipantsInput!]
  connect: [RoomWhereUniqueInput!]
}

input RoomCreateOneWithoutMessagesInput {
  create: RoomCreateWithoutMessagesInput
  connect: RoomWhereUniqueInput
}

input RoomCreateWithoutMessagesInput {
  id: ID
  participants: UserCreateManyWithoutRoomsInput
}

input RoomCreateWithoutParticipantsInput {
  id: ID
  messages: MessageCreateManyWithoutRoomInput
}

type RoomEdge {
  node: Room!
  cursor: String!
}

enum RoomOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RoomPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RoomScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [RoomScalarWhereInput!]
  OR: [RoomScalarWhereInput!]
  NOT: [RoomScalarWhereInput!]
}

type RoomSubscriptionPayload {
  mutation: MutationType!
  node: Room
  updatedFields: [String!]
  previousValues: RoomPreviousValues
}

input RoomSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RoomWhereInput
  AND: [RoomSubscriptionWhereInput!]
  OR: [RoomSubscriptionWhereInput!]
  NOT: [RoomSubscriptionWhereInput!]
}

input RoomUpdateInput {
  participants: UserUpdateManyWithoutRoomsInput
  messages: MessageUpdateManyWithoutRoomInput
}

input RoomUpdateManyWithoutParticipantsInput {
  create: [RoomCreateWithoutParticipantsInput!]
  delete: [RoomWhereUniqueInput!]
  connect: [RoomWhereUniqueInput!]
  set: [RoomWhereUniqueInput!]
  disconnect: [RoomWhereUniqueInput!]
  update: [RoomUpdateWithWhereUniqueWithoutParticipantsInput!]
  upsert: [RoomUpsertWithWhereUniqueWithoutParticipantsInput!]
  deleteMany: [RoomScalarWhereInput!]
}

input RoomUpdateOneRequiredWithoutMessagesInput {
  create: RoomCreateWithoutMessagesInput
  update: RoomUpdateWithoutMessagesDataInput
  upsert: RoomUpsertWithoutMessagesInput
  connect: RoomWhereUniqueInput
}

input RoomUpdateWithoutMessagesDataInput {
  participants: UserUpdateManyWithoutRoomsInput
}

input RoomUpdateWithoutParticipantsDataInput {
  messages: MessageUpdateManyWithoutRoomInput
}

input RoomUpdateWithWhereUniqueWithoutParticipantsInput {
  where: RoomWhereUniqueInput!
  data: RoomUpdateWithoutParticipantsDataInput!
}

input RoomUpsertWithoutMessagesInput {
  update: RoomUpdateWithoutMessagesDataInput!
  create: RoomCreateWithoutMessagesInput!
}

input RoomUpsertWithWhereUniqueWithoutParticipantsInput {
  where: RoomWhereUniqueInput!
  update: RoomUpdateWithoutParticipantsDataInput!
  create: RoomCreateWithoutParticipantsInput!
}

input RoomWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  participants_every: UserWhereInput
  participants_some: UserWhereInput
  participants_none: UserWhereInput
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [RoomWhereInput!]
  OR: [RoomWhereInput!]
  NOT: [RoomWhereInput!]
}

input RoomWhereUniqueInput {
  id: ID
}

type Story {
  id: ID!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  caption: String
  user: User!
  tagUser(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StoryConnection {
  pageInfo: PageInfo!
  edges: [StoryEdge]!
  aggregate: AggregateStory!
}

input StoryCreateInput {
  id: ID
  files: FileCreateManyInput
  caption: String
  user: UserCreateOneWithoutStoriesInput!
  tagUser: UserCreateManyWithoutTagedUserInput
}

input StoryCreateManyWithoutTagUserInput {
  create: [StoryCreateWithoutTagUserInput!]
  connect: [StoryWhereUniqueInput!]
}

input StoryCreateManyWithoutUserInput {
  create: [StoryCreateWithoutUserInput!]
  connect: [StoryWhereUniqueInput!]
}

input StoryCreateWithoutTagUserInput {
  id: ID
  files: FileCreateManyInput
  caption: String
  user: UserCreateOneWithoutStoriesInput!
}

input StoryCreateWithoutUserInput {
  id: ID
  files: FileCreateManyInput
  caption: String
  tagUser: UserCreateManyWithoutTagedUserInput
}

type StoryEdge {
  node: Story!
  cursor: String!
}

enum StoryOrderByInput {
  id_ASC
  id_DESC
  caption_ASC
  caption_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StoryPreviousValues {
  id: ID!
  caption: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input StoryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  caption: String
  caption_not: String
  caption_in: [String!]
  caption_not_in: [String!]
  caption_lt: String
  caption_lte: String
  caption_gt: String
  caption_gte: String
  caption_contains: String
  caption_not_contains: String
  caption_starts_with: String
  caption_not_starts_with: String
  caption_ends_with: String
  caption_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [StoryScalarWhereInput!]
  OR: [StoryScalarWhereInput!]
  NOT: [StoryScalarWhereInput!]
}

type StorySubscriptionPayload {
  mutation: MutationType!
  node: Story
  updatedFields: [String!]
  previousValues: StoryPreviousValues
}

input StorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StoryWhereInput
  AND: [StorySubscriptionWhereInput!]
  OR: [StorySubscriptionWhereInput!]
  NOT: [StorySubscriptionWhereInput!]
}

input StoryUpdateInput {
  files: FileUpdateManyInput
  caption: String
  user: UserUpdateOneRequiredWithoutStoriesInput
  tagUser: UserUpdateManyWithoutTagedUserInput
}

input StoryUpdateManyDataInput {
  caption: String
}

input StoryUpdateManyMutationInput {
  caption: String
}

input StoryUpdateManyWithoutTagUserInput {
  create: [StoryCreateWithoutTagUserInput!]
  delete: [StoryWhereUniqueInput!]
  connect: [StoryWhereUniqueInput!]
  set: [StoryWhereUniqueInput!]
  disconnect: [StoryWhereUniqueInput!]
  update: [StoryUpdateWithWhereUniqueWithoutTagUserInput!]
  upsert: [StoryUpsertWithWhereUniqueWithoutTagUserInput!]
  deleteMany: [StoryScalarWhereInput!]
  updateMany: [StoryUpdateManyWithWhereNestedInput!]
}

input StoryUpdateManyWithoutUserInput {
  create: [StoryCreateWithoutUserInput!]
  delete: [StoryWhereUniqueInput!]
  connect: [StoryWhereUniqueInput!]
  set: [StoryWhereUniqueInput!]
  disconnect: [StoryWhereUniqueInput!]
  update: [StoryUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [StoryUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [StoryScalarWhereInput!]
  updateMany: [StoryUpdateManyWithWhereNestedInput!]
}

input StoryUpdateManyWithWhereNestedInput {
  where: StoryScalarWhereInput!
  data: StoryUpdateManyDataInput!
}

input StoryUpdateWithoutTagUserDataInput {
  files: FileUpdateManyInput
  caption: String
  user: UserUpdateOneRequiredWithoutStoriesInput
}

input StoryUpdateWithoutUserDataInput {
  files: FileUpdateManyInput
  caption: String
  tagUser: UserUpdateManyWithoutTagedUserInput
}

input StoryUpdateWithWhereUniqueWithoutTagUserInput {
  where: StoryWhereUniqueInput!
  data: StoryUpdateWithoutTagUserDataInput!
}

input StoryUpdateWithWhereUniqueWithoutUserInput {
  where: StoryWhereUniqueInput!
  data: StoryUpdateWithoutUserDataInput!
}

input StoryUpsertWithWhereUniqueWithoutTagUserInput {
  where: StoryWhereUniqueInput!
  update: StoryUpdateWithoutTagUserDataInput!
  create: StoryCreateWithoutTagUserInput!
}

input StoryUpsertWithWhereUniqueWithoutUserInput {
  where: StoryWhereUniqueInput!
  update: StoryUpdateWithoutUserDataInput!
  create: StoryCreateWithoutUserInput!
}

input StoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  files_every: FileWhereInput
  files_some: FileWhereInput
  files_none: FileWhereInput
  caption: String
  caption_not: String
  caption_in: [String!]
  caption_not_in: [String!]
  caption_lt: String
  caption_lte: String
  caption_gt: String
  caption_gte: String
  caption_contains: String
  caption_not_contains: String
  caption_starts_with: String
  caption_not_starts_with: String
  caption_ends_with: String
  caption_not_ends_with: String
  user: UserWhereInput
  tagUser_every: UserWhereInput
  tagUser_some: UserWhereInput
  tagUser_none: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [StoryWhereInput!]
  OR: [StoryWhereInput!]
  NOT: [StoryWhereInput!]
}

input StoryWhereUniqueInput {
  id: ID
}

type Subscription {
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  commentLike(where: CommentLikeSubscriptionWhereInput): CommentLikeSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  hash(where: HashSubscriptionWhereInput): HashSubscriptionPayload
  like(where: LikeSubscriptionWhereInput): LikeSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  room(where: RoomSubscriptionWhereInput): RoomSubscriptionPayload
  story(where: StorySubscriptionWhereInput): StorySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  userLogin(where: UserLoginSubscriptionWhereInput): UserLoginSubscriptionPayload
}

type User {
  id: ID!
  password: String!
  username: String!
  email: String!
  avatar: String
  firstName: String
  lastName: String
  bio: String
  following(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  followers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  commentLikes(where: CommentLikeWhereInput, orderBy: CommentLikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CommentLike!]
  rooms(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Room!]
  savedPosts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  state: String!
  stories(where: StoryWhereInput, orderBy: StoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Story!]
  tagedUser(where: StoryWhereInput, orderBy: StoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Story!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  password: String!
  username: String!
  email: String!
  avatar: String
  firstName: String
  lastName: String
  bio: String
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  posts: PostCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  commentLikes: CommentLikeCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  savedPosts: PostCreateManyWithoutSavedByUserInput
  state: String
  stories: StoryCreateManyWithoutUserInput
  tagedUser: StoryCreateManyWithoutTagUserInput
}

input UserCreateManyWithoutFollowersInput {
  create: [UserCreateWithoutFollowersInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutFollowingInput {
  create: [UserCreateWithoutFollowingInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutRoomsInput {
  create: [UserCreateWithoutRoomsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutSavedPostsInput {
  create: [UserCreateWithoutSavedPostsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutTagedUserInput {
  create: [UserCreateWithoutTagedUserInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCommentLikesInput {
  create: UserCreateWithoutCommentLikesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLikesInput {
  create: UserCreateWithoutLikesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutStoriesInput {
  create: UserCreateWithoutStoriesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentLikesInput {
  id: ID
  password: String!
  username: String!
  email: String!
  avatar: String
  firstName: String
  lastName: String
  bio: String
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  posts: PostCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  savedPosts: PostCreateManyWithoutSavedByUserInput
  state: String
  stories: StoryCreateManyWithoutUserInput
  tagedUser: StoryCreateManyWithoutTagUserInput
}

input UserCreateWithoutCommentsInput {
  id: ID
  password: String!
  username: String!
  email: String!
  avatar: String
  firstName: String
  lastName: String
  bio: String
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  posts: PostCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  commentLikes: CommentLikeCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  savedPosts: PostCreateManyWithoutSavedByUserInput
  state: String
  stories: StoryCreateManyWithoutUserInput
  tagedUser: StoryCreateManyWithoutTagUserInput
}

input UserCreateWithoutFollowersInput {
  id: ID
  password: String!
  username: String!
  email: String!
  avatar: String
  firstName: String
  lastName: String
  bio: String
  following: UserCreateManyWithoutFollowersInput
  posts: PostCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  commentLikes: CommentLikeCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  savedPosts: PostCreateManyWithoutSavedByUserInput
  state: String
  stories: StoryCreateManyWithoutUserInput
  tagedUser: StoryCreateManyWithoutTagUserInput
}

input UserCreateWithoutFollowingInput {
  id: ID
  password: String!
  username: String!
  email: String!
  avatar: String
  firstName: String
  lastName: String
  bio: String
  followers: UserCreateManyWithoutFollowingInput
  posts: PostCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  commentLikes: CommentLikeCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  savedPosts: PostCreateManyWithoutSavedByUserInput
  state: String
  stories: StoryCreateManyWithoutUserInput
  tagedUser: StoryCreateManyWithoutTagUserInput
}

input UserCreateWithoutLikesInput {
  id: ID
  password: String!
  username: String!
  email: String!
  avatar: String
  firstName: String
  lastName: String
  bio: String
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  posts: PostCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  commentLikes: CommentLikeCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  savedPosts: PostCreateManyWithoutSavedByUserInput
  state: String
  stories: StoryCreateManyWithoutUserInput
  tagedUser: StoryCreateManyWithoutTagUserInput
}

input UserCreateWithoutPostsInput {
  id: ID
  password: String!
  username: String!
  email: String!
  avatar: String
  firstName: String
  lastName: String
  bio: String
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  commentLikes: CommentLikeCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  savedPosts: PostCreateManyWithoutSavedByUserInput
  state: String
  stories: StoryCreateManyWithoutUserInput
  tagedUser: StoryCreateManyWithoutTagUserInput
}

input UserCreateWithoutRoomsInput {
  id: ID
  password: String!
  username: String!
  email: String!
  avatar: String
  firstName: String
  lastName: String
  bio: String
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  posts: PostCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  commentLikes: CommentLikeCreateManyWithoutUserInput
  savedPosts: PostCreateManyWithoutSavedByUserInput
  state: String
  stories: StoryCreateManyWithoutUserInput
  tagedUser: StoryCreateManyWithoutTagUserInput
}

input UserCreateWithoutSavedPostsInput {
  id: ID
  password: String!
  username: String!
  email: String!
  avatar: String
  firstName: String
  lastName: String
  bio: String
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  posts: PostCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  commentLikes: CommentLikeCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  state: String
  stories: StoryCreateManyWithoutUserInput
  tagedUser: StoryCreateManyWithoutTagUserInput
}

input UserCreateWithoutStoriesInput {
  id: ID
  password: String!
  username: String!
  email: String!
  avatar: String
  firstName: String
  lastName: String
  bio: String
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  posts: PostCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  commentLikes: CommentLikeCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  savedPosts: PostCreateManyWithoutSavedByUserInput
  state: String
  tagedUser: StoryCreateManyWithoutTagUserInput
}

input UserCreateWithoutTagedUserInput {
  id: ID
  password: String!
  username: String!
  email: String!
  avatar: String
  firstName: String
  lastName: String
  bio: String
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  posts: PostCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  commentLikes: CommentLikeCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  savedPosts: PostCreateManyWithoutSavedByUserInput
  state: String
  stories: StoryCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

type UserLogin {
  id: ID!
  email: String!
  loginSecret: String
}

type UserLoginConnection {
  pageInfo: PageInfo!
  edges: [UserLoginEdge]!
  aggregate: AggregateUserLogin!
}

input UserLoginCreateInput {
  id: ID
  email: String!
  loginSecret: String
}

type UserLoginEdge {
  node: UserLogin!
  cursor: String!
}

enum UserLoginOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  loginSecret_ASC
  loginSecret_DESC
}

type UserLoginPreviousValues {
  id: ID!
  email: String!
  loginSecret: String
}

type UserLoginSubscriptionPayload {
  mutation: MutationType!
  node: UserLogin
  updatedFields: [String!]
  previousValues: UserLoginPreviousValues
}

input UserLoginSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserLoginWhereInput
  AND: [UserLoginSubscriptionWhereInput!]
  OR: [UserLoginSubscriptionWhereInput!]
  NOT: [UserLoginSubscriptionWhereInput!]
}

input UserLoginUpdateInput {
  email: String
  loginSecret: String
}

input UserLoginUpdateManyMutationInput {
  email: String
  loginSecret: String
}

input UserLoginWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  loginSecret: String
  loginSecret_not: String
  loginSecret_in: [String!]
  loginSecret_not_in: [String!]
  loginSecret_lt: String
  loginSecret_lte: String
  loginSecret_gt: String
  loginSecret_gte: String
  loginSecret_contains: String
  loginSecret_not_contains: String
  loginSecret_starts_with: String
  loginSecret_not_starts_with: String
  loginSecret_ends_with: String
  loginSecret_not_ends_with: String
  AND: [UserLoginWhereInput!]
  OR: [UserLoginWhereInput!]
  NOT: [UserLoginWhereInput!]
}

input UserLoginWhereUniqueInput {
  id: ID
  email: String
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  password_ASC
  password_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  avatar_ASC
  avatar_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  bio_ASC
  bio_DESC
  state_ASC
  state_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  password: String!
  username: String!
  email: String!
  avatar: String
  firstName: String
  lastName: String
  bio: String
  state: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  bio: String
  bio_not: String
  bio_in: [String!]
  bio_not_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_gt: String
  bio_gte: String
  bio_contains: String
  bio_not_contains: String
  bio_starts_with: String
  bio_not_starts_with: String
  bio_ends_with: String
  bio_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  password: String
  username: String
  email: String
  avatar: String
  firstName: String
  lastName: String
  bio: String
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  posts: PostUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  commentLikes: CommentLikeUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  savedPosts: PostUpdateManyWithoutSavedByUserInput
  state: String
  stories: StoryUpdateManyWithoutUserInput
  tagedUser: StoryUpdateManyWithoutTagUserInput
}

input UserUpdateInput {
  password: String
  username: String
  email: String
  avatar: String
  firstName: String
  lastName: String
  bio: String
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  posts: PostUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  commentLikes: CommentLikeUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  savedPosts: PostUpdateManyWithoutSavedByUserInput
  state: String
  stories: StoryUpdateManyWithoutUserInput
  tagedUser: StoryUpdateManyWithoutTagUserInput
}

input UserUpdateManyDataInput {
  password: String
  username: String
  email: String
  avatar: String
  firstName: String
  lastName: String
  bio: String
  state: String
}

input UserUpdateManyMutationInput {
  password: String
  username: String
  email: String
  avatar: String
  firstName: String
  lastName: String
  bio: String
  state: String
}

input UserUpdateManyWithoutFollowersInput {
  create: [UserCreateWithoutFollowersInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowersInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowersInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutFollowingInput {
  create: [UserCreateWithoutFollowingInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowingInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowingInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutRoomsInput {
  create: [UserCreateWithoutRoomsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutRoomsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutRoomsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutSavedPostsInput {
  create: [UserCreateWithoutSavedPostsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutSavedPostsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutSavedPostsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutTagedUserInput {
  create: [UserCreateWithoutTagedUserInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTagedUserInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTagedUserInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCommentLikesInput {
  create: UserCreateWithoutCommentLikesInput
  update: UserUpdateWithoutCommentLikesDataInput
  upsert: UserUpsertWithoutCommentLikesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutLikesInput {
  create: UserCreateWithoutLikesInput
  update: UserUpdateWithoutLikesDataInput
  upsert: UserUpsertWithoutLikesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutStoriesInput {
  create: UserCreateWithoutStoriesInput
  update: UserUpdateWithoutStoriesDataInput
  upsert: UserUpsertWithoutStoriesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCommentLikesDataInput {
  password: String
  username: String
  email: String
  avatar: String
  firstName: String
  lastName: String
  bio: String
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  posts: PostUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  savedPosts: PostUpdateManyWithoutSavedByUserInput
  state: String
  stories: StoryUpdateManyWithoutUserInput
  tagedUser: StoryUpdateManyWithoutTagUserInput
}

input UserUpdateWithoutCommentsDataInput {
  password: String
  username: String
  email: String
  avatar: String
  firstName: String
  lastName: String
  bio: String
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  posts: PostUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  commentLikes: CommentLikeUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  savedPosts: PostUpdateManyWithoutSavedByUserInput
  state: String
  stories: StoryUpdateManyWithoutUserInput
  tagedUser: StoryUpdateManyWithoutTagUserInput
}

input UserUpdateWithoutFollowersDataInput {
  password: String
  username: String
  email: String
  avatar: String
  firstName: String
  lastName: String
  bio: String
  following: UserUpdateManyWithoutFollowersInput
  posts: PostUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  commentLikes: CommentLikeUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  savedPosts: PostUpdateManyWithoutSavedByUserInput
  state: String
  stories: StoryUpdateManyWithoutUserInput
  tagedUser: StoryUpdateManyWithoutTagUserInput
}

input UserUpdateWithoutFollowingDataInput {
  password: String
  username: String
  email: String
  avatar: String
  firstName: String
  lastName: String
  bio: String
  followers: UserUpdateManyWithoutFollowingInput
  posts: PostUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  commentLikes: CommentLikeUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  savedPosts: PostUpdateManyWithoutSavedByUserInput
  state: String
  stories: StoryUpdateManyWithoutUserInput
  tagedUser: StoryUpdateManyWithoutTagUserInput
}

input UserUpdateWithoutLikesDataInput {
  password: String
  username: String
  email: String
  avatar: String
  firstName: String
  lastName: String
  bio: String
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  posts: PostUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  commentLikes: CommentLikeUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  savedPosts: PostUpdateManyWithoutSavedByUserInput
  state: String
  stories: StoryUpdateManyWithoutUserInput
  tagedUser: StoryUpdateManyWithoutTagUserInput
}

input UserUpdateWithoutPostsDataInput {
  password: String
  username: String
  email: String
  avatar: String
  firstName: String
  lastName: String
  bio: String
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  commentLikes: CommentLikeUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  savedPosts: PostUpdateManyWithoutSavedByUserInput
  state: String
  stories: StoryUpdateManyWithoutUserInput
  tagedUser: StoryUpdateManyWithoutTagUserInput
}

input UserUpdateWithoutRoomsDataInput {
  password: String
  username: String
  email: String
  avatar: String
  firstName: String
  lastName: String
  bio: String
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  posts: PostUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  commentLikes: CommentLikeUpdateManyWithoutUserInput
  savedPosts: PostUpdateManyWithoutSavedByUserInput
  state: String
  stories: StoryUpdateManyWithoutUserInput
  tagedUser: StoryUpdateManyWithoutTagUserInput
}

input UserUpdateWithoutSavedPostsDataInput {
  password: String
  username: String
  email: String
  avatar: String
  firstName: String
  lastName: String
  bio: String
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  posts: PostUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  commentLikes: CommentLikeUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  state: String
  stories: StoryUpdateManyWithoutUserInput
  tagedUser: StoryUpdateManyWithoutTagUserInput
}

input UserUpdateWithoutStoriesDataInput {
  password: String
  username: String
  email: String
  avatar: String
  firstName: String
  lastName: String
  bio: String
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  posts: PostUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  commentLikes: CommentLikeUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  savedPosts: PostUpdateManyWithoutSavedByUserInput
  state: String
  tagedUser: StoryUpdateManyWithoutTagUserInput
}

input UserUpdateWithoutTagedUserDataInput {
  password: String
  username: String
  email: String
  avatar: String
  firstName: String
  lastName: String
  bio: String
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  posts: PostUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  commentLikes: CommentLikeUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  savedPosts: PostUpdateManyWithoutSavedByUserInput
  state: String
  stories: StoryUpdateManyWithoutUserInput
}

input UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowersDataInput!
}

input UserUpdateWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowingDataInput!
}

input UserUpdateWithWhereUniqueWithoutRoomsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutRoomsDataInput!
}

input UserUpdateWithWhereUniqueWithoutSavedPostsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSavedPostsDataInput!
}

input UserUpdateWithWhereUniqueWithoutTagedUserInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTagedUserDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutCommentLikesInput {
  update: UserUpdateWithoutCommentLikesDataInput!
  create: UserCreateWithoutCommentLikesInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutLikesInput {
  update: UserUpdateWithoutLikesDataInput!
  create: UserCreateWithoutLikesInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithoutStoriesInput {
  update: UserUpdateWithoutStoriesDataInput!
  create: UserCreateWithoutStoriesInput!
}

input UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowersDataInput!
  create: UserCreateWithoutFollowersInput!
}

input UserUpsertWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowingDataInput!
  create: UserCreateWithoutFollowingInput!
}

input UserUpsertWithWhereUniqueWithoutRoomsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutRoomsDataInput!
  create: UserCreateWithoutRoomsInput!
}

input UserUpsertWithWhereUniqueWithoutSavedPostsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSavedPostsDataInput!
  create: UserCreateWithoutSavedPostsInput!
}

input UserUpsertWithWhereUniqueWithoutTagedUserInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTagedUserDataInput!
  create: UserCreateWithoutTagedUserInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  bio: String
  bio_not: String
  bio_in: [String!]
  bio_not_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_gt: String
  bio_gte: String
  bio_contains: String
  bio_not_contains: String
  bio_starts_with: String
  bio_not_starts_with: String
  bio_ends_with: String
  bio_not_ends_with: String
  following_every: UserWhereInput
  following_some: UserWhereInput
  following_none: UserWhereInput
  followers_every: UserWhereInput
  followers_some: UserWhereInput
  followers_none: UserWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  likes_every: LikeWhereInput
  likes_some: LikeWhereInput
  likes_none: LikeWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  commentLikes_every: CommentLikeWhereInput
  commentLikes_some: CommentLikeWhereInput
  commentLikes_none: CommentLikeWhereInput
  rooms_every: RoomWhereInput
  rooms_some: RoomWhereInput
  rooms_none: RoomWhereInput
  savedPosts_every: PostWhereInput
  savedPosts_some: PostWhereInput
  savedPosts_none: PostWhereInput
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  stories_every: StoryWhereInput
  stories_some: StoryWhereInput
  stories_none: StoryWhereInput
  tagedUser_every: StoryWhereInput
  tagedUser_some: StoryWhereInput
  tagedUser_none: StoryWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}
`
      }
    